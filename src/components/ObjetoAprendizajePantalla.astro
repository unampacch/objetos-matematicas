---
import { BASE_PATH } from "@/config";
import type { AsignaturasData } from "@/types/asignaturas";

interface Props {
  class?: string;
  titulo?: string;
  subtitulo?: string;
  index?: number;
  asignatura: string;
  pantallaIndex: number;
}

const {
  subtitulo,
  titulo,
  index = 0,
  asignatura,
  pantallaIndex
} = Astro.props;

import { asignaturas as asignaturasJsonData } from '@/pages/asignaturas/asignaturas.json';
const asignaturasData: AsignaturasData = { asignaturas: asignaturasJsonData };

const asignaturaValida = asignaturasData.asignaturas[asignatura];

if (!asignaturaValida) {
  console.error(`Error: Asignatura no encontrada: ${asignatura}`);
  return null; // O manejar el error de otra forma, como mostrando un mensaje.
}

const { objetos_aprendizaje } = asignaturaValida;

if (!objetos_aprendizaje || index < 0 || index >= objetos_aprendizaje.length) {
  console.error(`Error: Índice de objeto de aprendizaje inválido (${index}) para la asignatura ${asignatura}.`);
  return null;
}
const objetoAprendizajeActual = objetos_aprendizaje[index];

const tituloEnPantallas = objetoAprendizajeActual?.pantallas?.[pantallaIndex]?.titulo ?? "";

const { pathname: currentAstroPathname } = Astro.url; // Pathname actual para la clase 'active'

// 1. Obtener el slug del objeto de aprendizaje actual desde tus datos.
//    Ej: "/asignaturas/matematicas-3/sistemas-coordenados"
//    O podría ser: "/asignaturas/matematicas-3/sistemas-coordenados/inicio"
const slugObjetoActual = objetoAprendizajeActual.slug;

// 2. Construir la URL base tentativa concatenando BASE_PATH y el slug.
let urlIntermedia = `${BASE_PATH}${slugObjetoActual}`;

// 3. Normalizar slashes:
//    - Si BASE_PATH es '/' y slugObjetoActual empieza con '/', se podría tener '//'.
//      Los navegadores suelen tratarlo como un solo '/', pero es mejor normalizar.
if (urlIntermedia.startsWith('//')) {
  urlIntermedia = urlIntermedia.substring(1);
}

// 4. Asegurar que la URL final para el enlace "1" termine con UN SOLO "/inicio".
let hrefEnlaceUno;
const sufijoInicio = "/inicio";

if (urlIntermedia.endsWith(sufijoInicio)) {
  // Si la URL intermedia ya termina con "/inicio", es la URL final.
  hrefEnlaceUno = urlIntermedia;
} else {
  // Si no termina con "/inicio", necesitamos añadirlo.
  // Primero, asegurar que la urlIntermedia no tenga un slash al final para evitar "/inicio/" o "//inicio".
  const baseSinSlashFinal = urlIntermedia.endsWith('/') ? urlIntermedia.slice(0, -1) : urlIntermedia;
  hrefEnlaceUno = `${baseSinSlashFinal}${sufijoInicio}`;
}
---

<section class="mx-auto mb-5 mt-5 max-w-screen-xl">
  <nav class="flex animate-fade-right" aria-label="Breadcrumb">
    <ol class="block items-center space-x-1 sm:inline-flex md:space-x-2 rtl:space-x-reverse">
      <li>
        <a
          href={`${BASE_PATH}/`}
          class="inline-flex items-center text-sm font-light text-gray-400 hover:underline"
        >
          <svg class="me-2.5 h-3 w-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20"> <path d="m19.707 9.293-2-2-7-7a1 1 0 0 0-1.414 0l-7 7-2 2a1 1 0 0 0 1.414 1.414L2 10.414V18a2 2 0 0 0 2 2h3a1 1 0 0 0 1-1v-4a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v4a1 1 0 0 0 1 1h3a2 2 0 0 0 2-2v-7.586l.293.293a1 1 0 0 0 1.414-1.414Z"></path> </svg>
          Inicio
        </a>
      </li>
      <li>
        <div class="flex items-center">
          <svg class="mx-1 h-3 w-3 text-gray-400 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10"> <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"></path> </svg>
          <a
            class="ms-1 text-sm font-light text-gray-400 hover:underline md:ms-2"
            href={`${BASE_PATH}/asignaturas/${asignaturaValida.slug}/`}
          >
            {asignaturaValida.titulo}
          </a>
        </div>
      </li>
      <li>
        <div class="flex items-center">
          <svg class="mx-1 h-3 w-3 font-light text-gray-300 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10"> <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"></path> </svg>
          {/* Usamos la misma lógica de normalización para el breadcrumb del objeto de aprendizaje si es necesario */}
          <a
            class="ms-1 text-sm font-light text-gray-400 hover:underline md:ms-2"
            href={objetoAprendizajeActual.slug.endsWith('/inicio') ? urlIntermedia : (urlIntermedia.endsWith('/') ? urlIntermedia.slice(0,-1) : urlIntermedia) }
            >{objetoAprendizajeActual.titulo}</a
          >
        </div>
      </li>
      <li aria-current="page">
        <div class="flex items-center">
          <svg class="mx-1 h-3 w-3 text-gray-400 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10"> <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"></path> </svg>
          <span class="ms-1 text-sm font-extrabold text-lightblue md:ms-2">{tituloEnPantallas}</span>
        </div>
      </li>
    </ol>
  </nav>

  <h2
    class="my-5 transform animate-fade-down text-pretty bg-gradient-to-r from-blue
    to-light bg-clip-text px-2 pb-1 text-3xl
    font-extrabold text-light text-transparent transition duration-1000 ease-in-out md:px-0 md:text-5xl lg:text-6xl"
  >
    {tituloEnPantallas}
  </h2>

  <article id="pantallas" class="flex animate-fade-up items-center justify-end">
    <span class="font-semibold uppercase text-lightblue">Pantallas</span>
    <a
      href={hrefEnlaceUno}
      class:list={[
        "ml-2 flex size-7 cursor-pointer items-center justify-center rounded-md border bg-light text-center text-lg text-dark transition-all ease-in-out hover:scale-110 hover:bg-blue hover:text-light",
        { active: currentAstroPathname === hrefEnlaceUno } // Astro.url.pathname no suele tener slash final
      ]}
      data-tooltip-placement="bottom"
      aria-label="Ir a la pantalla de inicio de este objeto de aprendizaje"
      data-tooltip-target="tooltip-pantalla-1"
    >
      1
    </a>
    <div
        id="tooltip-pantalla-1"
        role="tooltip"
        class="tooltip invisible absolute z-10 inline-block rounded-lg bg-lightblue px-3 py-2 text-sm font-medium text-dark opacity-0 shadow-sm transition-opacity duration-300"
    >
        Inicio del objeto de aprendizaje
        <div class="tooltip-arrow" data-popper-arrow />
    </div>

    {
      objetoAprendizajeActual?.pantallas?.map((pantalla: any, i: number) => {
        let pantallaPathHref = `${BASE_PATH}${pantalla.slug}`;
        if (pantallaPathHref.startsWith('//')) {
          pantallaPathHref = pantallaPathHref.substring(1);
        }
        // Asegurar que no haya slash final para consistencia con currentAstroPathname y hrefEnlaceUno
        if (pantallaPathHref !== '/' && pantallaPathHref.endsWith('/')) {
            pantallaPathHref = pantallaPathHref.slice(0, -1);
        }


        return (
          <a
            data-tooltip-target={`tooltip-pantalla-${i + 2}`}
            href={pantallaPathHref}
            class:list={[
              "ml-2 size-7 cursor-pointer rounded-md border bg-light text-center text-lg text-dark transition-all ease-in-out hover:scale-110 hover:bg-blue hover:text-light",
              { active: currentAstroPathname === pantallaPathHref }
            ]}
            data-tooltip-placement="bottom"
          >
            {i + 2}
            <div
              id={`tooltip-pantalla-${i + 2}`}
              role="tooltip"
              class="tooltip invisible absolute z-10 inline-block rounded-lg bg-lightblue px-3 py-2 text-sm font-medium text-dark opacity-0 shadow-sm transition-opacity duration-300"
            >
              {pantalla.titulo}
              <div class="tooltip-arrow" data-popper-arrow />
            </div>
          </a>
        );
      }) || ''
    }
  </article>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const header = document.getElementById('pantallas');
    window.addEventListener('scroll', () => {
      if (header) {
        if (window.scrollY > 0) {
          header.classList.add('pantallas');
        } else {
          header.classList.remove('pantallas');
        }
      }
    });
  });
</script>

<style is:global>
  .pantallas {
    position: fixed;
    top: 4.5rem;
    left: 0;
    padding: 0.3rem 1rem 0.3rem 0;
    width: 100%;
    background-color: var(--css-red-pantone);
    transition: all 0.3s ease-in-out;
    z-index: 10;
  }
  h2 {
    line-height: 2;
  }
  .active {
    background-color: var(--css-red-pantone);
    color: var(--css-light);
  }
</style>
